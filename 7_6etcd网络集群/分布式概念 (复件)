1，进程与线程
线程为某个程序中实现多任务并行执行，go通道实现线程间的通讯
进程之间的通讯可以通过PID（进程号）实现，C++Hook


2，并发
Raft(etcd就是raft的应用),Paxos 通过并发实现数据一致性
etcd       go    完成
zookeeper  java  完成
主要的作用就是完成数据的一致性


3，锁
决绝线程互斥的问题

package main

import (
	"sync"
	"fmt"
	"time"
)

var mux = &sync.Mutex{}

var cnt =0

func Count() {

	mux.Lock()
	cnt++
	time.Sleep(300*time.Millisecond)
	fmt.Println(cnt)
	mux.Unlock()
}


func main() {

	go Count()
	go Count()

	for   {
	}

}



4，并行
多CPU运算称为并行


5，集群
服务器集群，分布式运算，分布式存储，高并发处理
分布式运算
storm
spark
kfk

分布式存储
双机热备（etcd数据一致性）


6，状态特征
针对集群而言，确保每个节点都是领状态，零状态特征就是随时可以替换或增加或删除某个节点，
而且不会对集群状态造成影响


7，系统重发与幂等性
当某个节点状态发生了错我，集群系统可以通过重发等完成状态的调整，使得系统能够正常运行

8，硬件异常
电脑坏了

9，CAP理论
分布式系统的CAP理论：首先将分布式系统中的三个特征进行如下归纳

1，一致性
在分布式系统中，每个节点的数据需要相同

2，可用性
在分布式中，确保信息安全，节点的可用性，分布式系统的可用性

3，分区容忍性
节点间高内聚低耦合


10,2pc 
1，选举，2，提交


11,3pc 
1，选举，2，预提交，3，提交



12，心跳检测
心跳信号，时时刻刻检测某些状态，心跳频率在不影响功能的基础上，越低越好


13，高可用设计
分布式，必须确保某一台节点出现问题，整个系统依然可以正常运行


14，容错性
假设当某个节点真的坏掉，分布式中，系统能不能抵抗因此节点坏掉而产生的问题

15，负载均衡
在分布式系统中，要确定所有节点的运算量和存存储量要保持大体相同

16，全局ID
数组库中，在Oracle，sequence全局序列


17，哈希取模
密码学中，经常mod运算，完成某些加密算法，Hash中也设计mod,设计hash散列算法


18，路由表
分布式系统中，通过分发实现节点间数据的传递，分发数据的顺序称为路由表


19，数据拆分
将某个包数据，在不同的node 中完成计算，datasource 中的数据在不同数据库中完成存储




































































































































































